"""
 gTTS + FastAPI service
 =======================

 This module exposes a simple REST API built with **FastAPI** that uses the
 `gTTS` (Google Text‑to‑Speech) library to convert plain text into spoken
 audio.  It provides both a **GET** and a **POST** endpoint on `/tts` that
 accept text, language and other optional parameters and return the
 generated audio as an MP3 file.  The response is streamed back to the
 client using FastAPI's ``StreamingResponse`` so that large files do not
 consume excessive memory.

 **Running the service**
 ----------------------

 Install the required dependencies (FastAPI ≥0.118.0 and gTTS ≥2.5.4) via
 pip.  At the time of writing, the latest releases are ``fastapi``
 **0.118.0** (released 28 September 2025) and ``gTTS`` **2.5.4** (released
 10 November 2024)【762313265217824†L25-L33】【260573421167112†L28-L37】.  These
 versions include important bug fixes and should be used for new
 developments.  To install them along with an ASGI server such as
 ``uvicorn``, run::

     python -m pip install --upgrade fastapi==0.118.0 gTTS==2.5.4 uvicorn

 To start the service during development, execute the following command
 from the directory where this file lives::

     uvicorn gtts_fastapi_app:app --host 0.0.0.0 --port 8000 --reload

 Open http://localhost:8000/docs in your browser to view the automatic
 OpenAPI/Swagger documentation generated by FastAPI.  You can test the
 endpoints directly from that interface.

 **Endpoints**
 -------------

 - ``GET /tts`` – Accepts query parameters ``text`` (required), ``lang``
   (default ``th`` for Thai), ``slow`` (boolean) and ``tld`` (top‑level
   domain for accent selection).  Returns an MP3 audio stream.
 - ``POST /tts`` – Accepts a JSON body with the same fields as the GET
   endpoint.  Useful when consuming the API from JavaScript, cURL or
   PHP clients.

 For a working frontend example using jQuery as well as cURL and PHP
 examples, see the accompanying ``sample.html`` file and the comments at
 the bottom of this module.
 """

from __future__ import annotations

from io import BytesIO
from typing import Optional

from fastapi import FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse
from pydantic import BaseModel

try:
    # gTTS is optional at import time so that this module can be
    # imported without immediately failing if the library is missing.
    from gtts import gTTS
except ImportError as exc:  # pragma: no cover
    raise ImportError(
        "gTTS is required to run this application. Install it with 'pip install gTTS'."
    ) from exc

class TTSRequest(BaseModel):
    """Schema for POST requests to the /tts endpoint."""

    text: str
    lang: Optional[str] = "th"
    slow: Optional[bool] = False
    tld: Optional[str] = "com"

app = FastAPI(
    title="gTTS FastAPI Service",
    description=(
        "Convert text into speech using the gTTS library. "
        "Supports multiple languages and accents by specifying the 'lang' "
        "and 'tld' parameters."
    ),
    version="1.0.0",
)

# Enable CORS so the API can be accessed from browsers hosted on other origins.
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def build_speech(
    text: str,
    lang: str = "th",
    slow: bool = False,
    tld: str = "com",
) -> BytesIO:
    """
    Internal helper that builds an MP3 in memory using gTTS.

    Parameters
    ----------
    text: str
        The text to convert.  Must be non-empty.
    lang: str, optional
        The language code (IETF language tag).  gTTS defaults to
        English (``'en'``) if unspecified【820190142623888†L73-L80】.
    slow: bool, optional
        Whether to slow down the speech output (defaults to ``False``)
        【820190142623888†L76-L81】.
    tld: str, optional
        Top‑level domain used by Google Translate.  Different domains can
        produce different accents【820190142623888†L67-L71】.

    Returns
    -------
    io.BytesIO
        A file‑like object containing the MP3 data at its beginning.

    Raises
    ------
    HTTPException
        If ``text`` is empty or if the gTTS request fails.
    """
    if not text or not text.strip():
        raise HTTPException(status_code=400, detail="Parameter 'text' must not be empty.")
    try:
        tts = gTTS(text=text, lang=lang, slow=slow, tld=tld)
        mp3_fp: BytesIO = BytesIO()
        # Write the generated audio into the in‑memory file
        tts.write_to_fp(mp3_fp)
        mp3_fp.seek(0)
        return mp3_fp
    except ValueError as ve:
        # Likely an unsupported language
        raise HTTPException(status_code=400, detail=str(ve)) from ve
    except Exception as exc:
        # Unknown failure – return 500 Internal Server Error
        raise HTTPException(status_code=500, detail=f"TTS generation failed: {exc}") from exc

@app.get("/tts", response_class=StreamingResponse)
async def tts_get(
    text: str = Query(..., description="Text to convert to speech"),
    lang: str = Query("th", description="Language code (e.g. 'en', 'th', 'ja', 'zh-CN')"),
    slow: bool = Query(False, description="Read the text slowly"),
    tld: str = Query("com", description="Top‑level domain to select accent (e.g., 'com', 'co.uk')"),
) -> StreamingResponse:
    """
    Convert text to speech via a **GET** request.

    Use query parameters to provide the input text and configuration options.  The
    resulting MP3 audio is streamed back with the ``audio/mpeg`` media type.

    Examples
    --------

    Fetch English audio and save it to a file with cURL::

        curl -L -G --output hello.mp3 \
             --data-urlencode "text=Hello world" \
             --data-urlencode "lang=en" \
             http://localhost:8000/tts

    Fetch Thai audio using PHP::

        <?php
        $file = file_get_contents(
            'http://localhost:8000/tts?'.http_build_query([
                'text' => 'สวัสดีค่ะ นี่คือการทดสอบ',
                'lang' => 'th'
            ])
        );
        file_put_contents('speech.mp3', $file);
        ?>
    """
    mp3_fp = build_speech(text=text, lang=lang, slow=slow, tld=tld)
    # Set content disposition to inline so browsers can play it in an <audio> tag.
    headers = {"Content-Disposition": 'inline; filename="speech.mp3"'}
    return StreamingResponse(mp3_fp, media_type="audio/mpeg", headers=headers)

@app.post("/tts", response_class=StreamingResponse)
async def tts_post(req: TTSRequest) -> StreamingResponse:
    """
    Convert text to speech via a **POST** request.

    Expects a JSON body matching :class:`TTSRequest`.  This endpoint is
    convenient for AJAX clients (e.g. jQuery/Fetch) that send JSON data.
    See the sample HTML frontend in ``sample.html`` for a full example.
    """
    mp3_fp = build_speech(text=req.text, lang=req.lang, slow=req.slow, tld=req.tld)
    headers = {"Content-Disposition": 'inline; filename="speech.mp3"'}
    return StreamingResponse(mp3_fp, media_type="audio/mpeg", headers=headers)

if __name__ == "__main__":  # pragma: no cover
    # Allow running the server directly with `python gtts_fastapi_app.py`
    import uvicorn

    uvicorn.run(app, host="127.0.0.1", port=8000)
